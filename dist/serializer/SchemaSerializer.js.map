{"version":3,"file":"SchemaSerializer.js","sourceRoot":"","sources":["../../src/serializer/SchemaSerializer.ts"],"names":[],"mappings":"AACA,OAAO,EAAU,UAAU,EAAY,MAAM,kBAAkB,CAAC;AAIhE,MAAM,OAAO,gBAAgB;IACzB,KAAK,CAAI;IAET,QAAQ,CAAC,QAAa;QAClB,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IACvC,CAAC;IAED,QAAQ;QACJ,OAAO,IAAI,CAAC,KAAK,CAAC;IACtB,CAAC;IAED,KAAK,CAAC,OAAO;QACT,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACtC,CAAC;IAED,QAAQ;QACJ,IAAI,CAAC,KAAK,EAAE,CAAC,UAAU,CAAC,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC;IAC/C,CAAC;IAED,SAAS,CAAC,KAAe,EAAE,EAAa;QACpC,IAAI,IAAI,CAAC,KAAK,EAAE;YAEZ,MAAM,UAAU,GAAG,IAAI,UAAU,EAAE,CAAC;YACpC,UAAU,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;SAEhC;aAAM;YAEH,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,CAAQ,CAAC;SACpD;IACL,CAAC;CACJ","sourcesContent":["import { Serializer } from \"./Serializer\";\nimport { Schema, Reflection, Iterator } from \"@colyseus/schema\";\n\nexport type SchemaConstructor<T = Schema> = new (...args: any[]) => T;\n\nexport class SchemaSerializer<T extends Schema = any> implements Serializer<T> {\n    state: T;\n\n    setState(rawState: any) {\n        return this.state.decode(rawState);\n    }\n\n    getState() {\n        return this.state;\n    }\n\n    patch(patches) {\n        return this.state.decode(patches);\n    }\n\n    teardown() {\n        this.state?.['$changes']?.root.clearRefs();\n    }\n\n    handshake(bytes: number[], it?: Iterator) {\n        if (this.state) {\n            // TODO: validate client/server definitinos\n            const reflection = new Reflection();\n            reflection.decode(bytes, it);\n\n        } else {\n            // initialize reflected state from server\n            this.state = Reflection.decode(bytes, it) as any;\n        }\n    }\n}\n"]}