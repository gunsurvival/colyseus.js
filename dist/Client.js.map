{"version":3,"file":"Client.js","sourceRoot":"","sources":["../src/Client.ts"],"names":[],"mappings":"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","sourcesContent":["import { post, get } from \"httpie\";\n\nimport { ServerError } from './errors/ServerError';\nimport { Room, RoomAvailable } from './Room';\nimport { SchemaConstructor } from './serializer/SchemaSerializer';\n\nexport type JoinOptions = any;\n\nexport class MatchMakeError extends Error {\n    code: number;\n    constructor(message: string, code: number) {\n        super(message);\n        this.code = code;\n        Object.setPrototypeOf(this, MatchMakeError.prototype);\n    }\n}\n\n// - React Native does not provide `window.location`\n// - Cocos Creator (Native) does not provide `window.location.hostname`\nconst DEFAULT_ENDPOINT = (typeof (window) !== \"undefined\" &&  typeof (window?.location?.hostname) !== \"undefined\")\n    ? `${window.location.protocol.replace(\"http\", \"ws\")}//${window.location.hostname}${(window.location.port && `:${window.location.port}`)}`\n    : \"ws://127.0.0.1:2567\";\n\nexport interface EndpointSettings {\n    hostname: string,\n    port: number,\n    useSSL: boolean,\n}\n\nexport class Client {\n    protected settings: EndpointSettings;\n\n    constructor(settings: string | EndpointSettings = DEFAULT_ENDPOINT) {\n        if (typeof (settings) === \"string\") {\n            const url = new URL(settings);\n            const useSSL = (url.protocol === \"https:\" || url.protocol === \"wss:\");\n            const port = Number(url.port || (useSSL ? 443 : 80));\n\n            this.settings = {\n                hostname: url.hostname,\n                port,\n                useSSL\n            };\n\n        } else {\n            this.settings = settings;\n        }\n    }\n\n    public async joinOrCreate<T>(roomName: string, options: JoinOptions = {}, rootSchema?: SchemaConstructor<T>) {\n        return await this.createMatchMakeRequest<T>('joinOrCreate', roomName, options, rootSchema);\n    }\n\n    public async create<T>(roomName: string, options: JoinOptions = {}, rootSchema?: SchemaConstructor<T>) {\n        return await this.createMatchMakeRequest<T>('create', roomName, options, rootSchema);\n    }\n\n    public async join<T>(roomName: string, options: JoinOptions = {}, rootSchema?: SchemaConstructor<T>) {\n        return await this.createMatchMakeRequest<T>('join', roomName, options, rootSchema);\n    }\n\n    public async joinById<T>(roomId: string, options: JoinOptions = {}, rootSchema?: SchemaConstructor<T>) {\n        return await this.createMatchMakeRequest<T>('joinById', roomId, options, rootSchema);\n    }\n\n    /**\n     * Re-establish connection with a room this client was previously connected to.\n     *\n     * @param reconnectionToken The `room.reconnectionToken` from previously connected room.\n     * @param rootSchema (optional) Concrete root schema definition\n     * @returns Promise<Room>\n     */\n    public async reconnect<T>(reconnectionToken: string, rootSchema?: SchemaConstructor<T>) {\n        if (typeof (reconnectionToken) === \"string\" && typeof (rootSchema) === \"string\") {\n            throw new Error(\"DEPRECATED: .reconnect() now only accepts 'reconnectionToken' as argument.\\nYou can get this token from previously connected `room.reconnectionToken`\");\n        }\n        const [roomId, token] = reconnectionToken.split(\":\");\n        return await this.createMatchMakeRequest<T>('reconnect', roomId, { reconnectionToken: token }, rootSchema);\n    }\n\n    public async getAvailableRooms<Metadata = any>(roomName: string = \"\"): Promise<RoomAvailable<Metadata>[]> {\n        return (\n            await get(this.getHttpEndpoint(`${roomName}`), {\n                headers: {\n                    'Accept': 'application/json'\n                }\n            })\n        ).data;\n    }\n\n    public async consumeSeatReservation<T>(\n        response: any,\n        rootSchema?: SchemaConstructor<T>,\n        previousRoom?: Room // used in devMode\n    ): Promise<Room<T>> {\n        const room = this.createRoom<T>(response.room.name, rootSchema);\n        room.roomId = response.room.roomId;\n        room.sessionId = response.sessionId;\n\n        const options: any = { sessionId: room.sessionId };\n\n        // forward \"reconnection token\" in case of reconnection.\n        if (response.reconnectionToken) {\n            options.reconnectionToken = response.reconnectionToken;\n        }\n\n        const targetRoom = previousRoom || room;\n        room.connect(this.buildEndpoint(response.room, options), response.devMode && (async () => {\n            console.info(`[Colyseus devMode]: ${String.fromCodePoint(0x1F504)} Re-establishing connection with room id '${room.roomId}'...`); // 🔄\n\n            let retryCount = 0;\n            let retryMaxRetries = 8;\n\n            const retryReconnection = async () => {\n                retryCount++;\n\n                try {\n                    await this.consumeSeatReservation(response, rootSchema, targetRoom);\n                    console.info(`[Colyseus devMode]: ${String.fromCodePoint(0x2705)} Successfully re-established connection with room '${room.roomId}'`); // ✅\n\n                } catch (e) {\n                    if (retryCount < retryMaxRetries) {\n                        console.info(`[Colyseus devMode]: ${String.fromCodePoint(0x1F504)} retrying... (${retryCount} out of ${retryMaxRetries})`); // 🔄\n                        setTimeout(retryReconnection, 2000);\n\n                    } else {\n                        console.info(`[Colyseus devMode]: ${String.fromCodePoint(0x274C)} Failed to reconnect. Is your server running? Please check server logs.`); // ❌\n                    }\n                }\n            };\n\n            setTimeout(retryReconnection, 2000);\n        }), targetRoom);\n\n        return new Promise((resolve, reject) => {\n            const onError = (code, message) => reject(new ServerError(code, message));\n            targetRoom.onError.once(onError);\n\n            targetRoom['onJoin'].once(() => {\n                targetRoom.onError.remove(onError);\n                resolve(targetRoom);\n            });\n        });\n    }\n\n    protected async createMatchMakeRequest<T>(\n        method: string,\n        roomName: string,\n        options: JoinOptions = {},\n        rootSchema?: SchemaConstructor<T>\n    ) {\n        const response = (\n            await post(this.getHttpEndpoint(`${method}/${roomName}`), {\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(options)\n            })\n        ).data;\n\n        if (response.error) {\n            throw new MatchMakeError(response.error, response.code);\n        }\n\n        // forward reconnection token during \"reconnect\" methods.\n        if (method === \"reconnect\") {\n            response.reconnectionToken = options.reconnectionToken;\n        }\n\n        return await this.consumeSeatReservation<T>(response, rootSchema);\n    }\n\n    protected createRoom<T>(roomName: string, rootSchema?: SchemaConstructor<T>) {\n        return new Room<T>(roomName, rootSchema);\n    }\n\n    protected buildEndpoint(room: any, options: any = {}) {\n        const params = [];\n\n        for (const name in options) {\n            if (!options.hasOwnProperty(name)) {\n                continue;\n            }\n            params.push(`${name}=${options[name]}`);\n        }\n\n        let endpoint = (this.settings.useSSL)\n            ? \"wss://\"\n            : \"ws://\"\n\n        if (room.publicAddress) {\n            endpoint += `${room.publicAddress}`;\n\n        } else {\n            endpoint += `${this.settings.hostname}${this.getEndpointPort()}`;\n        }\n\n        return `${endpoint}/${room.processId}/${room.roomId}?${params.join('&')}`;\n    }\n\n    protected getHttpEndpoint(segments: string) {\n        return `${(this.settings.useSSL) ? \"https\" : \"http\"}://${this.settings.hostname}${this.getEndpointPort()}/matchmake/${segments}`;\n    }\n\n    protected getEndpointPort() {\n        return (this.settings.port !== 80 && this.settings.port !== 443)\n            ? `:${this.settings.port}`\n            : \"\";\n    }\n}\n"]}